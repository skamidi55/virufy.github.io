{"version":3,"sources":["utils/swConfig.ts","serviceWorker.ts","i18n.ts","index.tsx"],"names":["onUpdate","registration","console","info","unregister","then","window","location","replace","process","onSuccess","log","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","onupdatefound","installingWorker","installing","onstatechange","state","controller","catch","error","registerLocale","enUS","ja","i18n","use","LanguageDetector","initReactI18next","init","resources","locales","ns","missingKeyHandler","supportedLngs","fallbackLng","fallbackNS","interpolation","escapeValue","StartApp","loadable","fallback","REACT_APP_SENTRY_DSN","Sentry","dsn","integrations","Integrations","BrowserTracing","release","REACT_APP_NAME","REACT_APP_VERSION","environment","REACT_APP_SENTRY_ENV","tracesSampleRate","ReactDOM","render","document","getElementById","URL","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","checkValidServiceWorker","swConfig"],"mappings":"oVAAe,GACbA,SAAU,SAACC,GAETC,QAAQC,KAAK,iCACbF,EAAaG,aAAaC,MAAK,WAC7BC,OAAOC,SAASC,QAAQC,kBAG5BC,UAAW,SAACT,GACVC,QAAQC,KAAK,mCACbD,QAAQS,IAAIV,KCEVW,EAAcC,QACW,cAA7BP,OAAOC,SAASO,UAEe,UAA7BR,OAAOC,SAASO,UAEhBR,OAAOC,SAASO,SAASC,MACvB,2DA8CN,SAASC,EAAgBC,EAAeC,GACtCC,UAAUC,cACPC,SAASJ,GACTZ,MAAK,SAAAJ,GACJA,EAAaqB,cAAgB,WAC3B,IAAMC,EAAmBtB,EAAauB,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfP,UAAUC,cAAcO,YAI1BzB,QAAQS,IACN,iHAKEO,GAAUA,EAAOlB,UACnBkB,EAAOlB,SAASC,KAMlBC,QAAQS,IAAI,sCAGRO,GAAUA,EAAOR,WACnBQ,EAAOR,UAAUT,WAO5B2B,OAAM,SAAAC,GACL3B,QAAQ2B,MAAM,4CAA6CA,M,8EC7FjEC,yBAAe,OAAQC,KACvBD,yBAAe,KAAME,KAGrBC,IACGC,IAAIC,KACJD,IAAIE,KACJC,KAAK,CACJC,UAAWC,EACXC,GAAI,OACJC,mBAAmB,EAEnBC,cAAe,CAAC,OAAQ,KAAM,MAC9BC,YAAa,OACbC,WAAY,OAEZC,cAAe,CACbC,aAAa,KAIJb,EAAf,EAAeA,ICfTc,EAAWC,aAAS,kBAAM,wDAAmB,CACjDC,SAAU,0CAGiCxC,0NAAYyC,sBACvDC,IAAY,CACVC,IAAK3C,0NAAYyC,qBACjBG,aAAc,CAAC,IAAIC,IAAaC,gBAChCC,QAAQ,GAAD,OAAK/C,0NAAYgD,eAAjB,eAAsChD,0NAAYiD,mBACzDC,YAAalD,0NAAYmD,sBAAwB,UAIjDC,iBAAkB,IAItBC,IAASC,OACP,oCACE,kBAAChB,EAAD,OAEFiB,SAASC,eAAe,SFXnB,SAAkB/C,GACvB,GAA6C,kBAAmBC,UAAW,CAMzE,GAJkB,IAAI+C,IACpBzD,aACAH,OAAOC,SAAS4D,MAEJC,SAAW9D,OAAOC,SAAS6D,OAIvC,OAGF9D,OAAO+D,iBAAiB,QAAQ,WAC9B,IAAMpD,EAAK,UAAMR,aAAN,sBAEPG,IAgEV,SAAiCK,EAAeC,GAE9CoD,MAAMrD,EAAO,CACXsD,QAAS,CAAE,iBAAkB,YAE5BlE,MAAK,SAAAmE,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CzD,UAAUC,cAAcyD,MAAMxE,MAAK,SAAAJ,GACjCA,EAAaG,aAAaC,MAAK,WAC7BC,OAAOC,SAASC,QAAQC,oBAK5BO,EAAgBC,EAAOC,MAG1BU,OAAM,WACL1B,QAAQS,IACN,oEAvFAmE,CAAwB7D,EAAOC,GAI/BC,UAAUC,cAAcyD,MAAMxE,MAAK,WACjCH,QAAQS,IACN,iHAMJK,EAAgBC,EAAOC,OEX7BE,CAAuB2D,I","file":"static/js/main.cd03198f.chunk.js","sourcesContent":["export default {\r\n  onUpdate: (registration: ServiceWorkerRegistration) => {\r\n    // eslint-disable-next-line no-restricted-globals, no-alert\r\n    console.info('New version available. Reload');\r\n    registration.unregister().then(() => {\r\n      window.location.replace(process.env.PUBLIC_URL);\r\n    });\r\n  },\r\n  onSuccess: (registration: ServiceWorkerRegistration) => {\r\n    console.info('service worker on success state');\r\n    console.log(registration);\r\n  },\r\n};\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.replace(process.env.PUBLIC_URL);\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import i18n from 'i18next';\r\nimport LanguageDetector from 'i18next-browser-languagedetector';\r\nimport { initReactI18next } from 'react-i18next';\r\nimport { registerLocale } from 'react-datepicker';\r\nimport {\r\n  enUS, ja,\r\n} from 'date-fns/locale';\r\n\r\n// Locales\r\nimport * as locales from './locales';\r\n\r\nregisterLocale('enUS', enUS);\r\nregisterLocale('ja', ja);\r\n\r\n// Translations\r\ni18n\r\n  .use(LanguageDetector)\r\n  .use(initReactI18next) // passes i18n down to react-i18next\r\n  .init({\r\n    resources: locales,\r\n    ns: 'main',\r\n    missingKeyHandler: false,\r\n\r\n    supportedLngs: ['enUS', 'ja', 'ar'],\r\n    fallbackLng: 'enUS',\r\n    fallbackNS: 'main',\r\n\r\n    interpolation: {\r\n      escapeValue: false,\r\n    },\r\n  });\r\n\r\nexport default i18n;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport loadable from '@loadable/component';\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\n\r\n// Sentry\r\nimport * as Sentry from '@sentry/react';\r\nimport { Integrations } from '@sentry/tracing';\r\n\r\n// Utils\r\nimport swConfig from 'utils/swConfig';\r\n\r\n// Service Work\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport './i18n';\r\n\r\nconst StartApp = loadable(() => import('./start'), {\r\n  fallback: <div>Loading</div>,\r\n});\r\n\r\nif (process.env.NODE_ENV === 'production' && process.env.REACT_APP_SENTRY_DSN) {\r\n  Sentry.init({\r\n    dsn: process.env.REACT_APP_SENTRY_DSN,\r\n    integrations: [new Integrations.BrowserTracing()],\r\n    release: `${process.env.REACT_APP_NAME} @ v${process.env.REACT_APP_VERSION}`,\r\n    environment: process.env.REACT_APP_SENTRY_ENV || 'unknown',\r\n\r\n    // We recommend adjusting this value in production, or using tracesSampler\r\n    // for finer control\r\n    tracesSampleRate: 1.0,\r\n  });\r\n}\r\n\r\nReactDOM.render(\r\n  <>\r\n    <StartApp />\r\n  </>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nif (process.env.NODE_ENV !== 'production') {\r\n  serviceWorker.unregister();\r\n} else {\r\n  serviceWorker.register(swConfig);\r\n}\r\n"],"sourceRoot":""}